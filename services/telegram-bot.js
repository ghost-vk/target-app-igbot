const debug = require('debug')('service:telegram-bot')
const TelegramBot = require('node-telegram-bot-api')
const {
  telegramBotToken,
  telegramChatId,
  telegramTechChatId,
} = require('./config')
const bot = new TelegramBot(telegramBotToken, { polling: false })

/**
 *
 * @param {string} name
 * @param {string} message
 * @param profilePic
 * @return {Promise<boolean>}
 */
const notify = async (name = null, message = null, profilePic = null) => {
  try {
    const action = message ? '–ø–∏—à–µ—Ç' : '–ø—Ä–æ—Å–∏—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å'

    let response = `–°–Ω–æ–≤–∞ –∫—Ç–æ-—Ç–æ ${action} –≤ Direct üí¨\n`

    if (message) {
      response += `*–°–æ–æ–±—â–µ–Ω–∏–µ*\n${message}\n`
    }

    if (name) {
      response += `*–ò–º—è*\n${name}`
    }

    await bot.sendMessage(telegramChatId, response, { parse_mode: 'markdown' })

    if (profilePic) {
      const caption = name ? name : '–§–æ—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤—ã—à–µ'
      await bot.sendPhoto(telegramChatId, profilePic, { caption })
    }

    return true
  } catch (e) {
    console.warn('üî¥ Failed notify')
  }
}

/**
 * @param {string} error
 * @return {Promise<void>}
 */
const notifyError = async (error) => {
  try {
    await bot.sendMessage(telegramTechChatId, `–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.\n${error}`)
  } catch (e) {
    debug('Error when notify about error:\n%O', e)
  }
}

module.exports = { notify, notifyError }
